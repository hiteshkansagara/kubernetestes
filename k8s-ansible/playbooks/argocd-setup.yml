- name: Deploy HA Argo CD on Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  vars:
    argocd_namespace: argocd
    nodeport_http: 30080
    nodeport_https: 30443
    ha_manifest_url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/ha/install.yaml
    replicas: 3
    kubeconfig_path: /root/.kube/config
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

  tasks:

    - name: Ensure python3-pip is installed
      ansible.builtin.apt:
        name: python3-pip
        state: present

    - name: Ensure Kubernetes Python client is installed via apt
      ansible.builtin.apt:
        name: python3-kubernetes
        state: present

    - name: Create Argo CD namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ argocd_namespace }}"
        state: present

    - name: Apply HA Argo CD manifests
      ansible.builtin.command:
        cmd: kubectl apply -n "{{ argocd_namespace }}" -f "{{ ha_manifest_url }}"
      register: apply_result
      changed_when: "'configured' in apply_result.stdout or 'created' in apply_result.stdout"

    - name: Wait for deployments to appear
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ argocd_namespace }}"
      register: deployments
      retries: 10
      delay: 6
      until: deployments.resources | length > 0
      loop:
        - argocd-server
        - argocd-repo-server
        - argocd-application-controller

    - name: Patch Argo CD replicas for HA
      kubernetes.core.k8s:
        kind: Deployment
        namespace: "{{ argocd_namespace }}"
        name: "{{ item }}"
        resource_definition:
          spec:
            replicas: "{{ replicas }}"
        merge_type:
          - strategic-merge
      loop:
        - argocd-application-controller
        - argocd-repo-server
        - argocd-server
      ignore_errors: true  # Optional if there's a chance a deployment doesn't exist yet

    - name: Wait for Argo CD pods to be Running (dynamic check)
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ argocd_namespace }}"
        label_selectors:
          - app.kubernetes.io/part-of=argocd
      register: argocd_pods
      until: >
        argocd_pods.resources is defined and
        (argocd_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length) >= (replicas * 3)
      retries: 10
      delay: 5

    - name: Fallback pause in case Argo CD not fully ready (optional but safe)
      ansible.builtin.pause:
        seconds: 60

    - name: Expose Argo CD server via NodePort
      kubernetes.core.k8s:
        namespace: "{{ argocd_namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: argocd-server-nodeport
            labels:
              app: argocd-server
          spec:
            type: NodePort
            ports:
              - name: http
                port: 80
                targetPort: 8080
                nodePort: "{{ nodeport_http }}"
              - name: https
                port: 443
                targetPort: 8080
                nodePort: "{{ nodeport_https }}"
            selector:
              app.kubernetes.io/name: argocd-server
              app.kubernetes.io/part-of: argocd

    - name: Get Argo CD admin password
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ argocd_namespace }}"
        name: argocd-initial-admin-secret
      register: admin_secret

    - name: Output Argo CD access info
      debug:
        msg: |
          âœ… Argo CD (HA) is deployed successfully!
          ðŸ”— Access URL: https://<ANY-NODE-IP>:{{ nodeport_https }}
          ðŸ‘¤ Username: admin
          ðŸ”‘ Password: {{ admin_secret.resources[0].data.password | b64decode }}